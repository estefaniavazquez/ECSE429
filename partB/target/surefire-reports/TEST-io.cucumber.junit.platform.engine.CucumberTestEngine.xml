<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="io.cucumber.junit.platform.engine.CucumberTestEngine" time="2.113" tests="30" errors="12" skipped="0" failures="2">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/home/julian/Documents/ECSE429/partB/target/test-classes:/home/julian/Documents/ECSE429/partB/target/classes:/home/julian/.m2/repository/io/cucumber/cucumber-java/7.18.1/cucumber-java-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-core/7.18.1/cucumber-core-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-gherkin/7.18.1/cucumber-gherkin-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-gherkin-messages/7.18.1/cucumber-gherkin-messages-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/gherkin/28.0.0/gherkin-28.0.0.jar:/home/julian/.m2/repository/io/cucumber/messages/24.1.0/messages-24.1.0.jar:/home/julian/.m2/repository/io/cucumber/testng-xml-formatter/0.2.0/testng-xml-formatter-0.2.0.jar:/home/julian/.m2/repository/io/cucumber/query/12.2.0/query-12.2.0.jar:/home/julian/.m2/repository/io/cucumber/tag-expressions/6.1.0/tag-expressions-6.1.0.jar:/home/julian/.m2/repository/io/cucumber/cucumber-expressions/17.1.0/cucumber-expressions-17.1.0.jar:/home/julian/.m2/repository/io/cucumber/datatable/7.18.1/datatable-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-plugin/7.18.1/cucumber-plugin-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/docstring/7.18.1/docstring-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/html-formatter/21.4.1/html-formatter-21.4.1.jar:/home/julian/.m2/repository/io/cucumber/junit-xml-formatter/0.5.0/junit-xml-formatter-0.5.0.jar:/home/julian/.m2/repository/io/cucumber/ci-environment/10.0.1/ci-environment-10.0.1.jar:/home/julian/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/julian/.m2/repository/io/cucumber/cucumber-junit-platform-engine/7.18.1/cucumber-junit-platform-engine-7.18.1.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-engine/1.10.3/junit-platform-engine-1.10.3.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite/1.11.0/junit-platform-suite-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite-api/1.11.0/junit-platform-suite-api-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite-engine/1.11.0/junit-platform-suite-engine-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite-commons/1.11.0/junit-platform-suite-commons-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-launcher/1.11.0/junit-platform-launcher-1.11.0.jar:/home/julian/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/home/julian/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/home/julian/.m2/repository/io/rest-assured/rest-assured/5.4.0/rest-assured-5.4.0.jar:/home/julian/.m2/repository/org/apache/groovy/groovy/4.0.16/groovy-4.0.16.jar:/home/julian/.m2/repository/org/apache/groovy/groovy-xml/4.0.16/groovy-xml-4.0.16.jar:/home/julian/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar:/home/julian/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar:/home/julian/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/home/julian/.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar:/home/julian/.m2/repository/org/apache/httpcomponents/httpmime/4.5.13/httpmime-4.5.13.jar:/home/julian/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/julian/.m2/repository/org/ccil/cowan/tagsoup/tagsoup/1.2.1/tagsoup-1.2.1.jar:/home/julian/.m2/repository/io/rest-assured/json-path/5.4.0/json-path-5.4.0.jar:/home/julian/.m2/repository/org/apache/groovy/groovy-json/4.0.16/groovy-json-4.0.16.jar:/home/julian/.m2/repository/io/rest-assured/rest-assured-common/5.4.0/rest-assured-common-5.4.0.jar:/home/julian/.m2/repository/io/rest-assured/xml-path/5.4.0/xml-path-5.4.0.jar:/home/julian/.m2/repository/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.jar:/home/julian/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-picocontainer/7.18.1/cucumber-picocontainer-7.18.1.jar:/home/julian/.m2/repository/org/picocontainer/picocontainer/2.15/picocontainer-2.15.jar:"/>
    <property name="java.vm.vendor" value="Arch Linux"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://openjdk.org/"/>
    <property name="user.timezone" value="America/New_York"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-21-openjdk/lib"/>
    <property name="sun.java.command" value="/home/julian/Documents/ECSE429/partB/target/surefire/surefirebooter-20251101151915916_3.jar /home/julian/Documents/ECSE429/partB/target/surefire 2025-11-01T15-19-15_869-jvmRun1 surefire-20251101151915916_1tmp surefire_0-20251101151915916_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/home/julian/Documents/ECSE429/partB/target/test-classes:/home/julian/Documents/ECSE429/partB/target/classes:/home/julian/.m2/repository/io/cucumber/cucumber-java/7.18.1/cucumber-java-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-core/7.18.1/cucumber-core-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-gherkin/7.18.1/cucumber-gherkin-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-gherkin-messages/7.18.1/cucumber-gherkin-messages-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/gherkin/28.0.0/gherkin-28.0.0.jar:/home/julian/.m2/repository/io/cucumber/messages/24.1.0/messages-24.1.0.jar:/home/julian/.m2/repository/io/cucumber/testng-xml-formatter/0.2.0/testng-xml-formatter-0.2.0.jar:/home/julian/.m2/repository/io/cucumber/query/12.2.0/query-12.2.0.jar:/home/julian/.m2/repository/io/cucumber/tag-expressions/6.1.0/tag-expressions-6.1.0.jar:/home/julian/.m2/repository/io/cucumber/cucumber-expressions/17.1.0/cucumber-expressions-17.1.0.jar:/home/julian/.m2/repository/io/cucumber/datatable/7.18.1/datatable-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-plugin/7.18.1/cucumber-plugin-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/docstring/7.18.1/docstring-7.18.1.jar:/home/julian/.m2/repository/io/cucumber/html-formatter/21.4.1/html-formatter-21.4.1.jar:/home/julian/.m2/repository/io/cucumber/junit-xml-formatter/0.5.0/junit-xml-formatter-0.5.0.jar:/home/julian/.m2/repository/io/cucumber/ci-environment/10.0.1/ci-environment-10.0.1.jar:/home/julian/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/julian/.m2/repository/io/cucumber/cucumber-junit-platform-engine/7.18.1/cucumber-junit-platform-engine-7.18.1.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-engine/1.10.3/junit-platform-engine-1.10.3.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite/1.11.0/junit-platform-suite-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite-api/1.11.0/junit-platform-suite-api-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite-engine/1.11.0/junit-platform-suite-engine-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-suite-commons/1.11.0/junit-platform-suite-commons-1.11.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-launcher/1.11.0/junit-platform-launcher-1.11.0.jar:/home/julian/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.2/junit-jupiter-api-5.10.2.jar:/home/julian/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/julian/.m2/repository/org/junit/platform/junit-platform-commons/1.10.2/junit-platform-commons-1.10.2.jar:/home/julian/.m2/repository/io/rest-assured/rest-assured/5.4.0/rest-assured-5.4.0.jar:/home/julian/.m2/repository/org/apache/groovy/groovy/4.0.16/groovy-4.0.16.jar:/home/julian/.m2/repository/org/apache/groovy/groovy-xml/4.0.16/groovy-xml-4.0.16.jar:/home/julian/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/httpclient-4.5.13.jar:/home/julian/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/httpcore-4.4.13.jar:/home/julian/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/home/julian/.m2/repository/commons-codec/commons-codec/1.11/commons-codec-1.11.jar:/home/julian/.m2/repository/org/apache/httpcomponents/httpmime/4.5.13/httpmime-4.5.13.jar:/home/julian/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/julian/.m2/repository/org/ccil/cowan/tagsoup/tagsoup/1.2.1/tagsoup-1.2.1.jar:/home/julian/.m2/repository/io/rest-assured/json-path/5.4.0/json-path-5.4.0.jar:/home/julian/.m2/repository/org/apache/groovy/groovy-json/4.0.16/groovy-json-4.0.16.jar:/home/julian/.m2/repository/io/rest-assured/rest-assured-common/5.4.0/rest-assured-common-5.4.0.jar:/home/julian/.m2/repository/io/rest-assured/xml-path/5.4.0/xml-path-5.4.0.jar:/home/julian/.m2/repository/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.jar:/home/julian/.m2/repository/com/google/code/gson/gson/2.10.1/gson-2.10.1.jar:/home/julian/.m2/repository/io/cucumber/cucumber-picocontainer/7.18.1/cucumber-picocontainer-7.18.1.jar:/home/julian/.m2/repository/org/picocontainer/picocontainer/2.15/picocontainer-2.15.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/julian"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-10-21"/>
    <property name="java.home" value="/usr/lib/jvm/java-21-openjdk"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/home/julian/Documents/ECSE429/partB"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="surefire.real.class.path" value="/home/julian/Documents/ECSE429/partB/target/surefire/surefirebooter-20251101151915916_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.9+10"/>
    <property name="user.name" value="julian"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.17.5-arch1-1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="localRepository" value="/home/julian/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="21.0.9"/>
    <property name="user.dir" value="/home/julian/Documents/ECSE429/partB"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Arch Linux"/>
    <property name="java.vm.version" value="21.0.9+10"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
  </properties>
  <testcase name="Example #1.1" classname="Creation Flows (Normal, Alternate, Error)" time="0.995">
    <system-err><![CDATA[Nov 01, 2025 3:19:16 PM io.cucumber.junit.platform.engine.DiscoverySelectorResolver warnWhenCucumberFeaturesPropertyIsUsed
WARNING: Discovering tests using the cucumber.features property. Other discovery selectors are ignored!

This is a work around for the limited JUnit 5 support in Maven and Gradle. Please request/upvote/sponsor/ect better support for JUnit 5 discovery selectors. For details see: https://github.com/cucumber/cucumber-jvm/pull/2498

If you are using the JUnit 5 Suite Engine, Platform Launcher API or Console Launcher you should not use this property. Please consult the JUnit 5 documentation on test selection.
]]></system-err>
  </testcase>
  <testcase name="Example #1.1" classname="Creation Flows (Normal, Alternate, Error)" time="0.034"/>
  <testcase name="Example #1.2" classname="Creation Flows (Normal, Alternate, Error)" time="0.051"/>
  <testcase name="Example #1.2" classname="Creation Flows (Normal, Alternate, Error)" time="0.041"/>
  <testcase name="Example #1.3" classname="Creation Flows (Normal, Alternate, Error)" time="0.042">
    <failure message="Expected status code did not match actual code. Response body: {&quot;id&quot;:&quot;52&quot;,&quot;title&quot;:&quot;&quot;,&quot;completed&quot;:&quot;false&quot;,&quot;active&quot;:&quot;false&quot;,&quot;description&quot;:&quot;&quot;} ==&gt; expected: &lt;400&gt; but was: &lt;201&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Expected status code did not match actual code. Response body: {"id":"52","title":"","completed":"false","active":"false","description":""} ==> expected: <400> but was: <201>
	at steps.ProjectsStepDefinitions.the_response_status_code_should_be(ProjectsStepDefinitions.java:101)
	at ✽.the response status code should be 400(file:///home/julian/Documents/ECSE429/partB/src/test/resources/features/projects_management.feature:19)
]]></failure>
  </testcase>
  <testcase name="Example #1.3" classname="Creation Flows (Normal, Alternate, Error)" time="0.022">
    <system-out><![CDATA[Confirmed presence of expected error message: title : field is mandatory
]]></system-out>
  </testcase>
  <testcase name="Example #1.1" classname="Update Flows (Normal, Alternate, Error)" time="0.059"/>
  <testcase name="Example #1.2" classname="Update Flows (Normal, Alternate, Error)" time="0.049"/>
  <testcase name="Example #1.3" classname="Update Flows (Normal, Alternate, Error)" time="0.043"/>
  <testcase name="Example #1.1" classname="Retrieval All and Filtering Flows (Normal, Alternate, Error)" time="0.052"/>
  <testcase name="Example #1.2" classname="Retrieval All and Filtering Flows (Normal, Alternate, Error)" time="0.059"/>
  <testcase name="Example #1.3" classname="Retrieval All and Filtering Flows (Normal, Alternate, Error)" time="0.045">
    <failure message="Expected status code did not match. Response: {&quot;projects&quot;:[]} ==&gt; expected: &lt;400&gt; but was: &lt;200&gt;" type="org.opentest4j.AssertionFailedError"><![CDATA[org.opentest4j.AssertionFailedError: Expected status code did not match. Response: {"projects":[]} ==> expected: <400> but was: <200>
	at steps.ProjectsStepDefinitions.the_status_code_should_be(ProjectsStepDefinitions.java:319)
	at ✽.the status code should be "400"(file:///home/julian/Documents/ECSE429/partB/src/test/resources/features/projects_management.feature:67)
]]></failure>
  </testcase>
  <testcase name="Example #1.1" classname="Deletion Flows (Normal, Error)" time="0.073"/>
  <testcase name="Example #1.2" classname="Deletion Flows (Normal, Error)" time="0.056"/>
  <testcase name="Example #1.3" classname="Deletion Flows (Normal, Error)" time="0.048"/>
  <testcase name="Example #1.1" classname="Retrieval Flows (Normal, Alternate, Error)" time="0.074"/>
  <testcase name="Example #1.2" classname="Retrieval Flows (Normal, Alternate, Error)" time="0.081"/>
  <testcase name="Example #1.3" classname="Retrieval Flows (Normal, Alternate, Error)" time="0.048"/>
  <testcase name="Example #1.1" classname="Partial Update Flows (Normal, Alternate, Error)" time="0.034">
    <error message="The step &apos;a todo exists with title &quot;POST Target Task&quot;, description &quot;Original Content&quot;, and doneStatus &quot;false&quot;&apos; and 5 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo exists with title {string}, description {string}, and doneStatus {string}&quot;)&#10;public void a_todo_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to update task {string} with body:&quot;)&#10;public void i_send_a_request_to_update_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    // For automatic transformation, change DataTable to one of&#10;    // E, List&lt;E&gt;, List&lt;List&lt;E&gt;&gt;, List&lt;Map&lt;K,V&gt;&gt;, Map&lt;K,V&gt; or&#10;    // Map&lt;K, List&lt;V&gt;&gt;. E,K,V must be a String, Integer, Float,&#10;    // Double, Byte, Short, Long, BigInteger or BigDecimal.&#10;    //&#10;    // For other transformations you can register a DataTableType.&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the update status should be {int}&quot;)&#10;public void the_update_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show field {string} with value {string}&quot;)&#10;public void the_updated_task_should_show_field_with_value(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo exists with title "POST Target Task", description "Original Content", and doneStatus "false"' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo exists with title {string}, description {string}, and doneStatus {string}")
public void a_todo_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to update task {string} with body:")
public void i_send_a_request_to_update_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("the update status should be {int}")
public void the_update_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show field {string} with value {string}")
public void the_updated_task_should_show_field_with_value(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.2" classname="Partial Update Flows (Normal, Alternate, Error)" time="0.015">
    <error message="The step &apos;a todo exists with title &quot;POST Target Task&quot;, description &quot;Original Content&quot;, and doneStatus &quot;false&quot;&apos; and 5 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo exists with title {string}, description {string}, and doneStatus {string}&quot;)&#10;public void a_todo_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to update task {string} with body:&quot;)&#10;public void i_send_a_request_to_update_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    // For automatic transformation, change DataTable to one of&#10;    // E, List&lt;E&gt;, List&lt;List&lt;E&gt;&gt;, List&lt;Map&lt;K,V&gt;&gt;, Map&lt;K,V&gt; or&#10;    // Map&lt;K, List&lt;V&gt;&gt;. E,K,V must be a String, Integer, Float,&#10;    // Double, Byte, Short, Long, BigInteger or BigDecimal.&#10;    //&#10;    // For other transformations you can register a DataTableType.&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the update status should be {int}&quot;)&#10;public void the_update_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show field {string} with value {string}&quot;)&#10;public void the_updated_task_should_show_field_with_value(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo exists with title "POST Target Task", description "Original Content", and doneStatus "false"' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo exists with title {string}, description {string}, and doneStatus {string}")
public void a_todo_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to update task {string} with body:")
public void i_send_a_request_to_update_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("the update status should be {int}")
public void the_update_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show field {string} with value {string}")
public void the_updated_task_should_show_field_with_value(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.3" classname="Partial Update Flows (Normal, Alternate, Error)" time="0.014">
    <error message="The step &apos;a todo exists with title &quot;POST Target Task&quot;, description &quot;Original Content&quot;, and doneStatus &quot;false&quot;&apos; and 6 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo exists with title {string}, description {string}, and doneStatus {string}&quot;)&#10;public void a_todo_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to update task {string} with body:&quot;)&#10;public void i_send_a_request_to_update_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    // For automatic transformation, change DataTable to one of&#10;    // E, List&lt;E&gt;, List&lt;List&lt;E&gt;&gt;, List&lt;Map&lt;K,V&gt;&gt;, Map&lt;K,V&gt; or&#10;    // Map&lt;K, List&lt;V&gt;&gt;. E,K,V must be a String, Integer, Float,&#10;    // Double, Byte, Short, Long, BigInteger or BigDecimal.&#10;    //&#10;    // For other transformations you can register a DataTableType.&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the update status should be {int}&quot;)&#10;public void the_update_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show field {string} with value {string}&quot;)&#10;public void the_updated_task_should_show_field_with_value(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the system should tell me if there was an error: \&quot;\&quot;Todo item not found.{string}&quot;)&#10;public void the_system_should_tell_me_if_there_was_an_error_todo_item_not_found(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo exists with title "POST Target Task", description "Original Content", and doneStatus "false"' and 6 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo exists with title {string}, description {string}, and doneStatus {string}")
public void a_todo_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to update task {string} with body:")
public void i_send_a_request_to_update_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("the update status should be {int}")
public void the_update_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show field {string} with value {string}")
public void the_updated_task_should_show_field_with_value(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the system should tell me if there was an error: \"\"Todo item not found.{string}")
public void the_system_should_tell_me_if_there_was_an_error_todo_item_not_found(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.1" classname="Retrieval and Filtering Flows (Normal, Alternate, Error)" time="0.016">
    <error message="The step &apos;a todo item exists with title &quot;Completed Filter Test 1&quot;, description &quot;This is done&quot;, and doneStatus &quot;true&quot;&apos; and 7 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}, description {string}, and doneStatus {string}&quot;)&#10;public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to view tasks filtered by the query {string} and requested format {string}&quot;)&#10;public void i_send_a_request_to_view_tasks_filtered_by_the_query_and_requested_format(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the status code should be {int}&quot;)&#10;public void the_status_code_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the task list format should be {string}&quot;)&#10;public void the_task_list_format_should_be(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the list should contain {int} tasks with completion status {string}&quot;)&#10;public void the_list_should_contain_tasks_with_completion_status(Integer int1, String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "Completed Filter Test 1", description "This is done", and doneStatus "true"' and 7 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}, description {string}, and doneStatus {string}")
public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to view tasks filtered by the query {string} and requested format {string}")
public void i_send_a_request_to_view_tasks_filtered_by_the_query_and_requested_format(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the status code should be {int}")
public void the_status_code_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the task list format should be {string}")
public void the_task_list_format_should_be(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the list should contain {int} tasks with completion status {string}")
public void the_list_should_contain_tasks_with_completion_status(Integer int1, String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.2" classname="Retrieval and Filtering Flows (Normal, Alternate, Error)" time="0.015">
    <error message="The step &apos;a todo item exists with title &quot;Completed Filter Test 1&quot;, description &quot;This is done&quot;, and doneStatus &quot;true&quot;&apos; and 7 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}, description {string}, and doneStatus {string}&quot;)&#10;public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to view tasks filtered by the query {string} and requested format {string}&quot;)&#10;public void i_send_a_request_to_view_tasks_filtered_by_the_query_and_requested_format(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the status code should be {int}&quot;)&#10;public void the_status_code_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the task list format should be {string}&quot;)&#10;public void the_task_list_format_should_be(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the list should contain {int} tasks with completion status {string}&quot;)&#10;public void the_list_should_contain_tasks_with_completion_status(Integer int1, String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "Completed Filter Test 1", description "This is done", and doneStatus "true"' and 7 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}, description {string}, and doneStatus {string}")
public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to view tasks filtered by the query {string} and requested format {string}")
public void i_send_a_request_to_view_tasks_filtered_by_the_query_and_requested_format(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the status code should be {int}")
public void the_status_code_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the task list format should be {string}")
public void the_task_list_format_should_be(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the list should contain {int} tasks with completion status {string}")
public void the_list_should_contain_tasks_with_completion_status(Integer int1, String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.3" classname="Retrieval and Filtering Flows (Normal, Alternate, Error)" time="0.015">
    <error message="The step &apos;a todo item exists with title &quot;Completed Filter Test 1&quot;, description &quot;This is done&quot;, and doneStatus &quot;true&quot;&apos; and 8 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}, description {string}, and doneStatus {string}&quot;)&#10;public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to view tasks filtered by the query {string} and requested format {string}&quot;)&#10;public void i_send_a_request_to_view_tasks_filtered_by_the_query_and_requested_format(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the status code should be {int}&quot;)&#10;public void the_status_code_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the task list format should be {string}&quot;)&#10;public void the_task_list_format_should_be(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the list should contain {int} tasks with completion status {string}&quot;)&#10;public void the_list_should_contain_tasks_with_completion_status(Integer int1, String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the system should tell me if there was an error: \&quot;\&quot;Invalid doneStatus value.{string}&quot;)&#10;public void the_system_should_tell_me_if_there_was_an_error_invalid_done_status_value(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "Completed Filter Test 1", description "This is done", and doneStatus "true"' and 8 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}, description {string}, and doneStatus {string}")
public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to view tasks filtered by the query {string} and requested format {string}")
public void i_send_a_request_to_view_tasks_filtered_by_the_query_and_requested_format(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the status code should be {int}")
public void the_status_code_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the task list format should be {string}")
public void the_task_list_format_should_be(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the list should contain {int} tasks with completion status {string}")
public void the_list_should_contain_tasks_with_completion_status(Integer int1, String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the system should tell me if there was an error: \"\"Invalid doneStatus value.{string}")
public void the_system_should_tell_me_if_there_was_an_error_invalid_done_status_value(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.1" classname="Deletion Flows (Normal, Alternate, Error)" time="0.014">
    <error message="The step &apos;a todo item exists with title &quot;Deletion Target&quot;&apos; and 3 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}&quot;)&#10;public void a_todo_item_exists_with_title(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to delete task {string} with requested format {string}&quot;)&#10;public void i_send_a_request_to_delete_task_with_requested_format(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the deletion status should be {int}&quot;)&#10;public void the_deletion_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the task with ID {string} should yield a {string} on a quick check&quot;)&#10;public void the_task_with_id_should_yield_a_on_a_quick_check(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "Deletion Target"' and 3 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}")
public void a_todo_item_exists_with_title(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to delete task {string} with requested format {string}")
public void i_send_a_request_to_delete_task_with_requested_format(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the deletion status should be {int}")
public void the_deletion_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the task with ID {string} should yield a {string} on a quick check")
public void the_task_with_id_should_yield_a_on_a_quick_check(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.2" classname="Deletion Flows (Normal, Alternate, Error)" time="0.013">
    <error message="The step &apos;a todo item exists with title &quot;Deletion Target&quot;&apos; and 3 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}&quot;)&#10;public void a_todo_item_exists_with_title(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to delete task {string} with requested format {string}&quot;)&#10;public void i_send_a_request_to_delete_task_with_requested_format(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the deletion status should be {int}&quot;)&#10;public void the_deletion_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the task with ID {string} should yield a {string} on a quick check&quot;)&#10;public void the_task_with_id_should_yield_a_on_a_quick_check(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "Deletion Target"' and 3 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}")
public void a_todo_item_exists_with_title(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to delete task {string} with requested format {string}")
public void i_send_a_request_to_delete_task_with_requested_format(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the deletion status should be {int}")
public void the_deletion_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the task with ID {string} should yield a {string} on a quick check")
public void the_task_with_id_should_yield_a_on_a_quick_check(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.3" classname="Deletion Flows (Normal, Alternate, Error)" time="0.012">
    <error message="The step &apos;a todo item exists with title &quot;Deletion Target&quot;&apos; and 4 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}&quot;)&#10;public void a_todo_item_exists_with_title(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to delete task {string} with requested format {string}&quot;)&#10;public void i_send_a_request_to_delete_task_with_requested_format(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the deletion status should be {int}&quot;)&#10;public void the_deletion_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the system should tell me if there was an error: \&quot;\&quot;Todo item not found.{string}&quot;)&#10;public void the_system_should_tell_me_if_there_was_an_error_todo_item_not_found(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the task with ID {string} should yield a {string} on a quick check&quot;)&#10;public void the_task_with_id_should_yield_a_on_a_quick_check(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "Deletion Target"' and 4 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}")
public void a_todo_item_exists_with_title(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to delete task {string} with requested format {string}")
public void i_send_a_request_to_delete_task_with_requested_format(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the deletion status should be {int}")
public void the_deletion_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the system should tell me if there was an error: \"\"Todo item not found.{string}")
public void the_system_should_tell_me_if_there_was_an_error_todo_item_not_found(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the task with ID {string} should yield a {string} on a quick check")
public void the_task_with_id_should_yield_a_on_a_quick_check(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.1" classname="Full Replacement Flows (Normal, Alternate, Error)" time="0.023">
    <error message="The step &apos;a todo item exists with title &quot;PUT Target Task&quot;, description &quot;Original Content&quot;, and done status &quot;false&quot;&apos; and 5 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}, description {string}, and done status {string}&quot;)&#10;public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to fully replace task {string} with body:&quot;)&#10;public void i_send_a_request_to_fully_replace_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    // For automatic transformation, change DataTable to one of&#10;    // E, List&lt;E&gt;, List&lt;List&lt;E&gt;&gt;, List&lt;Map&lt;K,V&gt;&gt;, Map&lt;K,V&gt; or&#10;    // Map&lt;K, List&lt;V&gt;&gt;. E,K,V must be a String, Integer, Float,&#10;    // Double, Byte, Short, Long, BigInteger or BigDecimal.&#10;    //&#10;    // For other transformations you can register a DataTableType.&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the replacement status should be {int}&quot;)&#10;public void the_replacement_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show the field {string} with value {string}&quot;)&#10;public void the_updated_task_should_show_the_field_with_value(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show the field {string} with value \&quot;&lt;expected_doneStatus&quot;)&#10;public void the_updated_task_should_show_the_field_with_value_expected_done_status(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "PUT Target Task", description "Original Content", and done status "false"' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}, description {string}, and done status {string}")
public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to fully replace task {string} with body:")
public void i_send_a_request_to_fully_replace_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("the replacement status should be {int}")
public void the_replacement_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show the field {string} with value {string}")
public void the_updated_task_should_show_the_field_with_value(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show the field {string} with value \"<expected_doneStatus")
public void the_updated_task_should_show_the_field_with_value_expected_done_status(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.2" classname="Full Replacement Flows (Normal, Alternate, Error)" time="0.017">
    <error message="The step &apos;a todo item exists with title &quot;PUT Target Task&quot;, description &quot;Original Content&quot;, and done status &quot;false&quot;&apos; and 5 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}, description {string}, and done status {string}&quot;)&#10;public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to fully replace task {string} with body:&quot;)&#10;public void i_send_a_request_to_fully_replace_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    // For automatic transformation, change DataTable to one of&#10;    // E, List&lt;E&gt;, List&lt;List&lt;E&gt;&gt;, List&lt;Map&lt;K,V&gt;&gt;, Map&lt;K,V&gt; or&#10;    // Map&lt;K, List&lt;V&gt;&gt;. E,K,V must be a String, Integer, Float,&#10;    // Double, Byte, Short, Long, BigInteger or BigDecimal.&#10;    //&#10;    // For other transformations you can register a DataTableType.&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the replacement status should be {int}&quot;)&#10;public void the_replacement_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show the field {string} with value {string}&quot;)&#10;public void the_updated_task_should_show_the_field_with_value(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show the field {string} with value \&quot;&lt;expected_doneStatus&quot;)&#10;public void the_updated_task_should_show_the_field_with_value_expected_done_status(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "PUT Target Task", description "Original Content", and done status "false"' and 5 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}, description {string}, and done status {string}")
public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to fully replace task {string} with body:")
public void i_send_a_request_to_fully_replace_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("the replacement status should be {int}")
public void the_replacement_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show the field {string} with value {string}")
public void the_updated_task_should_show_the_field_with_value(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show the field {string} with value \"<expected_doneStatus")
public void the_updated_task_should_show_the_field_with_value_expected_done_status(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="Example #1.3" classname="Full Replacement Flows (Normal, Alternate, Error)" time="0.014">
    <error message="The step &apos;a todo item exists with title &quot;PUT Target Task&quot;, description &quot;Original Content&quot;, and done status &quot;false&quot;&apos; and 6 other step(s) are undefined.&#10;You can implement these steps using the snippet(s) below:&#10;&#10;@Given(&quot;a todo item exists with title {string}, description {string}, and done status {string}&quot;)&#10;public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@When(&quot;I send a request to fully replace task {string} with body:&quot;)&#10;public void i_send_a_request_to_fully_replace_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    // For automatic transformation, change DataTable to one of&#10;    // E, List&lt;E&gt;, List&lt;List&lt;E&gt;&gt;, List&lt;Map&lt;K,V&gt;&gt;, Map&lt;K,V&gt; or&#10;    // Map&lt;K, List&lt;V&gt;&gt;. E,K,V must be a String, Integer, Float,&#10;    // Double, Byte, Short, Long, BigInteger or BigDecimal.&#10;    //&#10;    // For other transformations you can register a DataTableType.&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the replacement status should be {int}&quot;)&#10;public void the_replacement_status_should_be(Integer int1) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show the field {string} with value {string}&quot;)&#10;public void the_updated_task_should_show_the_field_with_value(String string, String string2) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the updated task should show the field {string} with value \&quot;&lt;expected_doneStatus&quot;)&#10;public void the_updated_task_should_show_the_field_with_value_expected_done_status(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;@Then(&quot;the system should tell me if there was an error: \&quot;\&quot;Title is required.{string}&quot;)&#10;public void the_system_should_tell_me_if_there_was_an_error_title_is_required(String string) {&#10;    // Write code here that turns the phrase above into concrete actions&#10;    throw new io.cucumber.java.PendingException();&#10;}&#10;" type="io.cucumber.junit.platform.engine.UndefinedStepException"><![CDATA[io.cucumber.junit.platform.engine.UndefinedStepException: 
The step 'a todo item exists with title "PUT Target Task", description "Original Content", and done status "false"' and 6 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("a todo item exists with title {string}, description {string}, and done status {string}")
public void a_todo_item_exists_with_title_description_and_done_status(String string, String string2, String string3) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I send a request to fully replace task {string} with body:")
public void i_send_a_request_to_fully_replace_task_with_body(String string, io.cucumber.datatable.DataTable dataTable) {
    // Write code here that turns the phrase above into concrete actions
    // For automatic transformation, change DataTable to one of
    // E, List<E>, List<List<E>>, List<Map<K,V>>, Map<K,V> or
    // Map<K, List<V>>. E,K,V must be a String, Integer, Float,
    // Double, Byte, Short, Long, BigInteger or BigDecimal.
    //
    // For other transformations you can register a DataTableType.
    throw new io.cucumber.java.PendingException();
}
@Then("the replacement status should be {int}")
public void the_replacement_status_should_be(Integer int1) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show the field {string} with value {string}")
public void the_updated_task_should_show_the_field_with_value(String string, String string2) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the updated task should show the field {string} with value \"<expected_doneStatus")
public void the_updated_task_should_show_the_field_with_value_expected_done_status(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Then("the system should tell me if there was an error: \"\"Title is required.{string}")
public void the_system_should_tell_me_if_there_was_an_error_title_is_required(String string) {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

	at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
	at io.cucumber.junit.platform.engine.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:22)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.lambda$runTestCase$4(CucumberEngineExecutionContext.java:114)
	at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$5(CucumberExecutionContext.java:136)
	at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
	at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:136)
	at io.cucumber.junit.platform.engine.CucumberEngineExecutionContext.runTestCase(CucumberEngineExecutionContext.java:109)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:168)
	at io.cucumber.junit.platform.engine.NodeDescriptor$PickleDescriptor.execute(NodeDescriptor.java:90)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
</testsuite>