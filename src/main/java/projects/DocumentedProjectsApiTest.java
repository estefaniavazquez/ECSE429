package projects;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import org.junit.*;

import java.net.HttpURLConnection;

import static org.junit.Assert.*;

import general.BaseApiTest;
import projects.Project.*;

import static general.CommonConstants.*;
import static general.Utils.*;


// Instead of running the tests in this class individually, you can run the entire test suite in AllApiTests.java, which includes all tests from all classes
public class DocumentedProjectsApiTest extends BaseApiTest {
    // Extending BaseApiTest to inherit server setup and teardown methods before and after every test

    // There is an instance for the default project that exists on server startup and can be called as "defaultProject"

    // Example of how to make use of the utils methods
    @Test
    public void testHeadProjectsJson() throws Exception {
        System.out.println("Running testHeadProjectsJson...");

        // The projects endpoint exists as a constant
        // the request methods also exist as constants
        // the format constants also exist as constants
        // "body" is for whenever you need to send a body with the request, otherwise it is null
        HttpURLConnection connection = request(PROJECTS_ENDPOINT, HEAD_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection); // this will return the exact body as a string

        // Printing out the response details to get a better idea of what is returned
        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(200, responseCode);
        assertEquals("OK", responseMessage);
        assertEquals(JSON_FORMAT, contentType);
        assertEquals("", responseBody);

        connection.disconnect();

        System.out.println("testHeadProjectsJson passed.");
    }

    // Example of how to use jackson to map the json response to a Project object
    @Test
    public void testPostProjectsJson() throws Exception {
        System.out.println("Running testPostProjectsJson...");

        String newProjectTitle = "New Project";
        String newProjectDescription = "This is a new project";
        boolean newProjectCompleted = false;
        boolean newProjectActive = true;

        // Given that the id is generated by the server, it is not included in the request body, which is why ProjectBody is used
        ProjectBody newProjectBody = new ProjectBody(newProjectTitle, newProjectCompleted, newProjectActive, newProjectDescription);
        ObjectMapper objectMapperBody = new ObjectMapper();
        String requestBody = objectMapperBody.writeValueAsString(newProjectBody);   // Convert the ProjectBody object to a JSON string

        // This request will handle making the connection and sending the request with the given body
        HttpURLConnection connection = request(PROJECTS_ENDPOINT, POST_METHOD, JSON_FORMAT, JSON_FORMAT, requestBody);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);

        // Transforming the response body into a Project object using Jackson to make assertions on it
        Project returnedProject = objectMapperBody.readValue(responseBody, Project.class);  // Because the response returns a single Project object, there is no need to use the JsonProject class

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(201, responseCode);
        assertEquals("Created", responseMessage);
        assertEquals(JSON_FORMAT, contentType);
        assertTrue(newProjectBody.bodySameAsProject(returnedProject));  // This will check that all fields in the body are the same as those in the returned project, except for the id which is generated by the server and there is no way of knowing what it will be beforehand

        connection.disconnect();

        System.out.println("testPostProjectsJson passed.");
    }

    // Similarly, you can create tests for XML format by using XmlMapper from Jackson
    @Test
    public void testPostProjectsXml() throws Exception {
        System.out.println("Running testPostProjectsXml...");

        String newProjectTitle = "New Project XML";
        String newProjectDescription = "This is a new project in XML";
        boolean newProjectCompleted = false;
        boolean newProjectActive = true;

        ProjectBody newProjectBody = new ProjectBody(newProjectTitle, newProjectCompleted, newProjectActive, newProjectDescription);
        XmlMapper xmlMapperBody = new XmlMapper();
        String requestBody = xmlMapperBody.writeValueAsString(newProjectBody);   // Convert the ProjectBody object to an XML string

        HttpURLConnection connection = request(PROJECTS_ENDPOINT, POST_METHOD, XML_FORMAT, XML_FORMAT, requestBody);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);

        // Transforming the response body into a Project object using Jackson to make assertions on it
        Project returnedProject = xmlMapperBody.readValue(responseBody, Project.class);  // Because the response returns a single Project object, there is no need to use the JsonProject class

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(201, responseCode);
        assertEquals("Created", responseMessage);
        assertEquals(XML_FORMAT, contentType);
        assertTrue(newProjectBody.bodySameAsProject(returnedProject));  // This will check that all fields in the body are the same as those in the returned project, except for the id which is generated by the server and there is no way of knowing what it will be beforehand

        connection.disconnect();

        System.out.println("testPostProjectsXml passed.");
    }

    // Another note is that PATCH requests are not directly supported by HttpURLConnection, so the utils method requestPATCH is provided to handle this (it uses the X-HTTP-Method-Override header to simulate a PATCH request)
}
