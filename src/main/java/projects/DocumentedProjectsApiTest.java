package projects;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;

import categories.JsonCategory;

import org.junit.*;
import org.junit.runners.MethodSorters;

import java.net.HttpURLConnection;

import static org.junit.Assert.*;

import general.BaseApiTest;
import projects.Project.*;

import static general.CommonConstants.*;
import static general.Utils.*;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class DocumentedProjectsApiTest extends BaseApiTest {
    // Extending BaseApiTest to inherit server setup and teardown methods before and
    // after every test

    @Test
    public void testGetProjectsJson() throws Exception {
        System.out.println("Running testGetProjectsJson...");

        HttpURLConnection connection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);
        System.out.println("Response body: " + responseBody);

        ObjectMapper objectMapper = new ObjectMapper();
        JsonProject projects = objectMapper.readValue(responseBody, JsonProject.class); // Using the JsonProject class
                                                                                        // to map the response to a list
                                                                                        // of Project objects

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(200, responseCode);
        assertEquals("OK", responseMessage);
        assertTrue(contentType.contains(JSON_FORMAT));
        assertEquals(1, projects.getProjects().length);
        assertEquals(defaultProject, projects.getProjects()[0]);
        connection.disconnect();

        System.out.println("testGetProjectsJson passed.");
    }

    // Example of how to make use of the utils methods
    @Test
    public void testHeadProjectsJson() throws Exception {
        System.out.println("Running testHeadProjectsJson...");

        // The projects endpoint exists as a constant
        // the request methods also exist as constants
        // the format constants also exist as constants
        // "body" is for whenever you need to send a body with the request, otherwise it
        // is null
        HttpURLConnection connection = request(PROJECTS_ENDPOINT, HEAD_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection); // this will return the exact body as a string

        // Printing out the response details to get a better idea of what is returned
        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(200, responseCode);
        assertEquals("OK", responseMessage);
        assertEquals(JSON_FORMAT, contentType);
        assertEquals("", responseBody);

        connection.disconnect();

        System.out.println("testHeadProjectsJson passed.");
    }

    // Example of how to use jackson to map the json response to a Project object
    @Test
    public void testPostProjectsJson() throws Exception {
        System.out.println("Running testPostProjectsJson...");

        // Check initial state
        HttpURLConnection initialConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT,
                null);
        String initialResponseBody = readResponse(initialConnection);
        JsonProject initialProjects = new ObjectMapper().readValue(initialResponseBody, JsonProject.class);
        int initialProjectCount = initialProjects.getProjects().length;
        initialConnection.disconnect();

        String newProjectTitle = "New Project";
        String newProjectDescription = "This is a new project";
        boolean newProjectCompleted = false;
        boolean newProjectActive = true;

        // Given that the id is generated by the server, it is not included in the
        // request body, which is why ProjectBody is used
        ProjectBody newProjectBody = new ProjectBody(newProjectTitle, newProjectCompleted, newProjectActive,
                newProjectDescription);
        ObjectMapper objectMapperBody = new ObjectMapper();
        String requestBody = objectMapperBody.writeValueAsString(newProjectBody); // Convert the ProjectBody object to a
                                                                                  // JSON string

        // This request will handle making the connection and sending the request with
        // the given body
        HttpURLConnection connection = request(PROJECTS_ENDPOINT, POST_METHOD, JSON_FORMAT, JSON_FORMAT, requestBody);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);

        // Transforming the response body into a Project object using Jackson to make
        // assertions on it
        Project returnedProject = objectMapperBody.readValue(responseBody, Project.class); // Because the response
                                                                                           // returns a single Project
                                                                                           // object, there is no need
                                                                                           // to use the JsonProject
                                                                                           // class

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(201, responseCode);
        assertEquals("Created", responseMessage);
        assertEquals(JSON_FORMAT, contentType);
        assertTrue(newProjectBody.bodySameAsProject(returnedProject)); // This will check that all fields in the body
                                                                       // are the same as those in the returned project,
                                                                       // except for the id which is generated by the
                                                                       // server and there is no way of knowing what it
                                                                       // will be beforehand
        
        // Verify the generated ID is unique and not null
        assertNotNull("Generated ID should not be null", returnedProject.getId());
        assertFalse("Generated ID should not be empty", returnedProject.getId().trim().isEmpty());
        
        // Verify the new project ID doesn't match any existing project IDs
        for (Project existingProject : initialProjects.getProjects()) {
            assertNotEquals("Generated ID should be unique", existingProject.getId(), returnedProject.getId());
        }

        connection.disconnect();

        // Check that the project count has increased by 1
        HttpURLConnection finalConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        String finalResponseBody = readResponse(finalConnection);
        JsonProject finalProjects = new ObjectMapper().readValue(finalResponseBody, JsonProject.class);
        int finalProjectCount = finalProjects.getProjects().length;
        finalConnection.disconnect();

        assertEquals(initialProjectCount + 1, finalProjectCount);
        
        // Verify existing projects remain unchanged
        for (Project initialProject : initialProjects.getProjects()) {
            boolean foundUnchanged = false;
            for (Project finalProject : finalProjects.getProjects()) {
                if (initialProject.getId().equals(finalProject.getId()) && 
                    initialProject.getTitle().equals(finalProject.getTitle()) &&
                    initialProject.getDescription().equals(finalProject.getDescription()) &&
                    initialProject.isCompleted() == finalProject.isCompleted() &&
                    initialProject.isActive() == finalProject.isActive()) {
                    foundUnchanged = true;
                    break;
                }
            }
            assertTrue("Existing project " + initialProject.getId() + " was modified", foundUnchanged);
        }

        System.out.println("testPostProjectsJson passed.");
    }

    @Test
    public void testPostEmptyProjectsJson() throws Exception {
        System.out.println("Running testPostEmptyProjectsJson...");

        // Check initial state
        HttpURLConnection initialConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        String initialResponseBody = readResponse(initialConnection);
        JsonProject initialProjects = new ObjectMapper().readValue(initialResponseBody, JsonProject.class);
        int initialProjectCount = initialProjects.getProjects().length;
        initialConnection.disconnect();

        String requestBody = "{}"; // Convert the ProjectBody object to a
                                   // JSON string

        // This request will handle making the connection and sending the request with
        // the given body
        HttpURLConnection connection = request(PROJECTS_ENDPOINT, POST_METHOD, JSON_FORMAT, JSON_FORMAT, requestBody);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(201, responseCode);
        assertEquals("Created", responseMessage);
        assertEquals(JSON_FORMAT, contentType);
        
        // Parse the response to verify default values
        ObjectMapper objectMapper = new ObjectMapper();
        Project createdProject = objectMapper.readValue(responseBody, Project.class);
        
        // Verify default values for empty project creation
        assertNotNull("ID should be generated", createdProject.getId());
        assertFalse("ID should not be empty", createdProject.getId().trim().isEmpty());
        assertEquals("Default title should be empty string", "", createdProject.getTitle());
        assertEquals("Default description should be empty string", "", createdProject.getDescription());
        assertFalse("Default completed should be false", createdProject.isCompleted());
        assertTrue("Default active should be true", createdProject.isActive());

        connection.disconnect();

        // Check that the project count has increased by 1
        HttpURLConnection finalConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT,
                null);
        String finalResponseBody = readResponse(finalConnection);
        JsonProject finalProjects = new ObjectMapper().readValue(finalResponseBody, JsonProject.class);
        int finalProjectCount = finalProjects.getProjects().length;
        finalConnection.disconnect();

        assertEquals(initialProjectCount + 1, finalProjectCount);

        System.out.println("testPostEmptyProjectsJson passed.");
    }

    @Test
    public void testPostRandomInputProjectsJson() throws Exception {
        System.out.println("Running testPostRandomInputProjectsJson...");

        // check initial state
        HttpURLConnection initialConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT,
                null);
        String initialResponseBody = readResponse(initialConnection);
        JsonProject initialProjects = new ObjectMapper().readValue(initialResponseBody, JsonProject.class);
        int initialProjectCount = initialProjects.getProjects().length;
        initialConnection.disconnect();

        String requestBody = "{'ui':'ui'}";

        // This request will handle making the connection and sending the request with
        // the given body
        HttpURLConnection connection = request(PROJECTS_ENDPOINT, POST_METHOD, JSON_FORMAT, JSON_FORMAT, requestBody);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(400, responseCode);
        assertEquals("Bad Request", responseMessage);
        assertEquals(JSON_FORMAT, contentType);
        assertEquals("{\"errorMessages\":[\"Could not find field: ui\"]}", responseBody);

        connection.disconnect();

        // check that the project count has not changed
        HttpURLConnection finalConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        String finalResponseBody = readResponse(finalConnection);
        JsonProject finalProjects = new ObjectMapper().readValue(finalResponseBody, JsonProject.class);
        int finalProjectCount = finalProjects.getProjects().length;
        finalConnection.disconnect();

        assertEquals(initialProjectCount, finalProjectCount);

        System.out.println("testPostRandomInputProjectsJson passed.");
    }

    @Test
    public void testPostIdInBodyProjectsJson() throws Exception {
        System.out.println("Running testPostIdInBodyProjectsJson...");

        // check initial state
        HttpURLConnection initialConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        String initialResponseBody = readResponse(initialConnection);
        JsonProject initialProjects = new ObjectMapper().readValue(initialResponseBody, JsonProject.class);
        int initialProjectCount = initialProjects.getProjects().length;
        initialConnection.disconnect();

        String requestBody = "{\"id\":\"12345\",\"title\":\"New Project with ID in body\",\"description\":\"This is a new project with an ID in the body\",\"completed\":false,\"active\":true}";

        // This request will handle making the connection and sending the request with
        // the given body
        HttpURLConnection connection = request(PROJECTS_ENDPOINT, POST_METHOD, JSON_FORMAT, JSON_FORMAT, requestBody);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(400, responseCode);
        assertEquals("Bad Request", responseMessage);
        assertEquals(JSON_FORMAT, contentType);
        assertEquals("{\"errorMessages\":[\"Invalid Creation: Failed Validation: Not allowed to create with id\"]}",
                responseBody);

        connection.disconnect();

        // check that the project count has not changed
        HttpURLConnection finalConnection = request(PROJECTS_ENDPOINT, GET_METHOD, JSON_FORMAT, JSON_FORMAT, null);
        String finalResponseBody = readResponse(finalConnection);
        JsonProject finalProjects = new ObjectMapper().readValue(finalResponseBody, JsonProject.class);
        int finalProjectCount = finalProjects.getProjects().length;
        finalConnection.disconnect();

        assertEquals(initialProjectCount, finalProjectCount);

        System.out.println("testPostIdInBodyProjectsJson passed.");
    }

    // Similarly, you can create tests for XML format by using XmlMapper from
    // Jackson
    @Test
    public void testPostProjectsXml() throws Exception {
        System.out.println("Running testPostProjectsXml...");

        HttpURLConnection initialConnection = request(PROJECTS_ENDPOINT, GET_METHOD, XML_FORMAT, XML_FORMAT, null);
        String initialResponseBody = readResponse(initialConnection);
        XmlProject initialProjects = new XmlMapper().readValue(initialResponseBody, XmlProject.class);
        int initialProjectCount = initialProjects.getProjects().length;
        initialConnection.disconnect();

        String newProjectTitle = "New Project XML";
        String newProjectDescription = "This is a new project in XML";
        boolean newProjectCompleted = false;
        boolean newProjectActive = true;

        ProjectBody newProjectBody = new ProjectBody(newProjectTitle, newProjectCompleted, newProjectActive,
                newProjectDescription);
        XmlMapper xmlMapperBody = new XmlMapper();
        String requestBody = xmlMapperBody.writeValueAsString(newProjectBody); // Convert the ProjectBody object to an
                                                                               // XML string

        HttpURLConnection connection = request(PROJECTS_ENDPOINT, POST_METHOD, XML_FORMAT, XML_FORMAT, requestBody);
        int responseCode = connection.getResponseCode();
        String responseMessage = connection.getResponseMessage();
        String contentType = connection.getContentType();
        String responseBody = readResponse(connection);

        // Transforming the response body into a Project object using Jackson to make
        // assertions on it
        Project returnedProject = xmlMapperBody.readValue(responseBody, Project.class); // Because the response returns
                                                                                        // a single Project object,
                                                                                        // there is no need to use the
                                                                                        // JsonProject class

        System.out.println("Response code: " + responseCode);
        System.out.println("Response message: " + responseMessage);
        System.out.println("Content-Type: " + contentType);
        System.out.println("Response body: " + responseBody);

        assertEquals(201, responseCode);
        assertEquals("Created", responseMessage);
        assertEquals(XML_FORMAT, contentType);
        assertTrue(newProjectBody.bodySameAsProject(returnedProject)); // This will check that all fields in the body
                                                                       // are the same as those in the returned project,
                                                                       // except for the id which is generated by the
                                                                       // server and there is no way of knowing what it
                                                                       // will be beforehand

        connection.disconnect();

        HttpURLConnection finalConnection = request(PROJECTS_ENDPOINT, GET_METHOD, XML_FORMAT, XML_FORMAT, null);
        String finalResponseBody = readResponse(finalConnection);
        XmlProject finalProjects = new XmlMapper().readValue(finalResponseBody, XmlProject.class);
        int finalProjectCount = finalProjects.getProjects().length;
        finalConnection.disconnect();

        assertEquals(initialProjectCount + 1, finalProjectCount);

        System.out.println("testPostProjectsXml passed.");
    }

    // Another note is that PATCH requests are not directly supported by
    // HttpURLConnection, so the utils method requestPATCH is provided to handle
    // this (it uses the X-HTTP-Method-Override header to simulate a PATCH request)
}
